// 173
// Binary Search Tree Iterator
// https://leetcode.com//problems/binary-search-tree-iterator/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {

    public BSTIterator(TreeNode root) {
        it = inOrder(root).GetEnumerator();
        if (it.MoveNext()) cur = it.Current;
    }

    /** @return whether we have a next smallest number */
    public bool HasNext() {
        return cur != null;
    }

    /** @return the next smallest number */
    public int Next() {
        int ret = cur.val;
        cur = it.MoveNext() ? it.Current : null;
        return ret;
    }
    private TreeNode cur;
    private IEnumerator<TreeNode> it;
    private IEnumerable<TreeNode> inOrder(TreeNode root) {
        if (root == null) yield break;
        foreach (var x in inOrder(root.left)) yield return x;
        yield return root;
        foreach (var x in inOrder(root.right)) yield return x;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.HasNext()) v[f()] = i.Next();
 */