// 173
// Binary Search Tree Iterator
// https://leetcode.com//problems/binary-search-tree-iterator/
# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator:
    # @param root, a binary search tree's root node
    def __init__(self, root):
        self.it = self.inOrder(root)

    # @return a boolean, whether we have a next smallest number
    def hasNext(self):
        try:
            self.cur = self.it.next();
        except StopIteration:
            return False
        return True;

    # @return an integer, the next smallest number
    def next(self):
        return self.cur;
        
    def inOrder(self, root):
        if root == None: return;
        for i in self.inOrder(root.left): yield i;
        yield root.val;
        for i in self.inOrder(root.right): yield i;
        
# Your BSTIterator will be called like this:
# i, v = BSTIterator(root), []
# while i.hasNext(): v.append(i.next())